

package userinterface.ClinicStaffRole;


import Business.Clinic.ClinicStaff;
import Business.Clinic.Therapist;
import Business.Clinic.TherapistDirectory;
import Business.EcoSystem;
import Business.University.Student;
import Business.University.StudentDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Therapy;
import Business.WorkQueue.TherapyQueue;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.MainJFrame;

/**
 *
 * @author  raunak
 */
public class ClinicStaffWorkAreaJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount account;
    ClinicStaff clinicstaff;
    TherapyQueue therapyqueue;
    StudentDirectory studentdirectory;
    TherapistDirectory therapistdirectory;
    int pay=0;
    
    
    /** Creates new form AdminWorkAreaJPanel */
    public ClinicStaffWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;
        this.clinicstaff = system.getClinicdirectory().getClinicstaffdir().RetrieveClinicStaff(MainJFrame.txtUsernameMain.getText());
        this.therapyqueue = system.getClinicdirectory().getTherapyqueue();
        this.studentdirectory = system.getUniversitydirectory().getStudentdir();
        this.therapistdirectory = system.getClinicdirectory().getTherapistdir();
        populateTherapistTable();
      
        //valueLabel.setText();
    }
    
    public void populateTherapistTable(){
        
         DefaultTableModel model = (DefaultTableModel) tblTherapists.getModel();
         model.setRowCount(0);
         for(Therapist therapist: therapistdirectory.gettherapistlist()){
             
             Object[] row = new Object[3];
                row[0]= therapist.getId();
                
                row[1]= therapist.getName();
                row[2] = therapist.getSpecialities();
                
                
                model.insertRow(0, row);
                
         }
          
    }
    
    public void populatePaymentTable(Therapy therapy, DefaultTableModel model){
        
        
        
        System.out.print("We are in populate paymebts\n");
        System.out.print("Therapy ID is "+ therapy.getId());
        Object[] row = new Object[5];
        row[0]= therapy.getId();
        row[1]=therapy.getTherapistid();
        row[2]=therapy.getStudentid();
        row[3]=therapy.getDate();
        if(((therapy.getTerminate()==false))) {
            
            row[4]="Session to be completed";
            
            
            
        }
        if(therapy.getPayment()==false && therapy.getTerminate()==true){
            
            pay = pay+300;
            row[4]="$300 to be paid";
            
        }
        if(therapy.getPayment()==true){
            
            
            row[4]="Payment completed";
            
        }
        
        
        model.insertRow(0, row);
        txtTotal.setText(String.valueOf(pay));
            
        
        
        
    }
    
    public void populateStudentTable(String studentid,DefaultTableModel model){
        
        
        
        Student student = studentdirectory.RetrieveStudent(studentid);
        Object[] row = new Object[4];
        row[0]= student.getId();
                
        row[1]= student.getPhno();
        int flag=0;
        String dat=null;
        String time = null;
        for(Therapy therapy: therapyqueue.getTherapylist()){
            
            if(therapy.getStudentid().equals(studentid)){
            
            if(therapy.getTerminate()==false){
                
                dat = therapy.getDate();
                time = therapy.getTime();
                flag=1;
                
                
                
                
                
            }
        }
        }
        
        if(flag==0){
            
            row[2]="TO BE SCHEDULED FOR NEXT APPOINTMENT";
            row[3]="TO BE SCHEDULED FOR NEXT APPOINTMENT";
        }
        
        if(flag==1){
            
            row[2] =dat;
            row[3]=time;
            
        }
                
                
        model.insertRow(0, row);
        
        
        
        
    }
    
    
    
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        managePaymentJPanel = new javax.swing.JPanel();
        lblCompletedSession = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnPay = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPaymentStatus = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        enterpriseLabel = new javax.swing.JLabel();
        lblTherapists = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTherapists = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        lblStudents = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        btnViewStudents = new javax.swing.JButton();
        lblSelect = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        cbcSlot = new javax.swing.JComboBox<>();
        btnAction1 = new javax.swing.JButton();
        calendarSession = new com.toedter.calendar.JCalendar();
        txtDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        valueLabel.setText("<value>");

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managePaymentJPanel.setBackground(new java.awt.Color(204, 255, 255));

        lblCompletedSession.setBackground(new java.awt.Color(204, 204, 255));
        lblCompletedSession.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCompletedSession.setForeground(new java.awt.Color(51, 51, 255));
        lblCompletedSession.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCompletedSession.setText("Completed Sessions");
        lblCompletedSession.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTotal.setText("Total");

        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        btnPay.setText("Payment Done");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        tblPaymentStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Session ID", "Therapist ID", "Student ID", "Date", "Payment Status"
            }
        ));
        jScrollPane4.setViewportView(tblPaymentStatus);

        javax.swing.GroupLayout managePaymentJPanelLayout = new javax.swing.GroupLayout(managePaymentJPanel);
        managePaymentJPanel.setLayout(managePaymentJPanelLayout);
        managePaymentJPanelLayout.setHorizontalGroup(
            managePaymentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                .addGroup(managePaymentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                        .addGroup(managePaymentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                                .addGap(251, 251, 251)
                                .addComponent(lblCompletedSession, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnPay)))
                        .addGap(0, 290, Short.MAX_VALUE))
                    .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)))
                .addContainerGap())
        );
        managePaymentJPanelLayout.setVerticalGroup(
            managePaymentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePaymentJPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lblCompletedSession, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(managePaymentJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPay))
                .addContainerGap(423, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Manage Payments", managePaymentJPanel);

        jPanel3.setBackground(new java.awt.Color(255, 204, 204));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("CLINIC STAFF");

        lblTherapists.setBackground(new java.awt.Color(204, 204, 255));
        lblTherapists.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTherapists.setForeground(new java.awt.Color(51, 51, 255));
        lblTherapists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTherapists.setText("THERAPISTS");
        lblTherapists.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblTherapists.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Therapist ID", "NAME", "Speciality"
            }
        ));
        jScrollPane1.setViewportView(tblTherapists);

        lblStudents.setBackground(new java.awt.Color(204, 204, 255));
        lblStudents.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudents.setForeground(new java.awt.Color(51, 51, 255));
        lblStudents.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStudents.setText("STUDENT INFORMATION");
        lblStudents.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Phone no.", "Appointment Date", "Appoinment Time"
            }
        ));
        jScrollPane2.setViewportView(tblStudent);

        btnViewStudents.setText("Click to View Students");
        btnViewStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewStudentsActionPerformed(evt);
            }
        });

        lblSelect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSelect.setText("Select Date to assign");

        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        cbcSlot.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Slot", "8:00 ", "9:00 ", "10:00 ", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        btnAction1.setText("Manage Payements");
        btnAction1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAction1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Switch to next tab to manage payments for the selected therapist and student");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(lblStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(btnViewStudents)
                        .addGap(18, 18, 18)
                        .addComponent(btnAction1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterpriseLabel)
                            .addComponent(lblTherapists, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(lblSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cbcSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)))
                .addComponent(calendarSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(enterpriseLabel)
                .addGap(29, 29, 29)
                .addComponent(lblTherapists, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewStudents)
                    .addComponent(btnAction1))
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbcSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAssign)
                        .addGap(43, 43, 43)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(calendarSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Manage Appointments", jPanel3);

        add(jTabbedPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 750));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAction1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAction1ActionPerformed
        // TODO add your handling code here:
        
        pay=0;
        
        DefaultTableModel modelOrder = (DefaultTableModel)tblTherapists.getModel();
         DefaultTableModel modelStudent = (DefaultTableModel)tblStudent.getModel();
         int selectedIndex = tblTherapists.getSelectedRow();
         if(selectedIndex==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Therapist!");
            return;
            
        }
         String therapistid=null;
         if(selectedIndex!=-1){
            
             therapistid = modelOrder.getValueAt(selectedIndex, 0).toString();
        }
         
        int selectedIndex1 = tblStudent.getSelectedRow();
        if(selectedIndex1==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Student!");
            return;
            
        }
        
        
        DefaultTableModel model = (DefaultTableModel) tblPaymentStatus.getModel();
        model.setRowCount(0);
        
        String studentid = null;
        if(selectedIndex1!=-1){
            
             studentid = modelStudent.getValueAt(selectedIndex1, 0).toString();
        }
        
        for(Therapy therapy: therapyqueue.getTherapylist()){
            
            if(therapy.getTherapistid().equals(therapistid) && therapy.getStudentid().equals(studentid)){
                
                populatePaymentTable(therapy,model);
            }
        }
         
         
    }//GEN-LAST:event_btnAction1ActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
         pay=0;
         DefaultTableModel modelOrder = (DefaultTableModel)tblPaymentStatus.getModel();
         int selectedIndex = tblPaymentStatus.getSelectedRow();
         int sessionid=0;
         if(selectedIndex==-1){
             
              JOptionPane.showMessageDialog(this, "Please Select a Row");
               return;
             
             
         }
         
                  if(selectedIndex!=-1){
            
             String sess = modelOrder.getValueAt(selectedIndex, 0).toString();
             sessionid = Integer.parseInt(sess);
        }
                  
        Therapy therapy1 = system.getClinicdirectory().getTherapyqueue().retrieveTherapy(sessionid);
        therapy1.setPayment(true);
         
        
        
       
        
        
        
        
        DefaultTableModel modelOrd = (DefaultTableModel)tblTherapists.getModel();
        DefaultTableModel modelStudent = (DefaultTableModel)tblStudent.getModel();
         int selectedIndex6 = tblTherapists.getSelectedRow();
         if(selectedIndex6==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Therapist!");
            return;
            
        }
         String therapistid=null;
         if(selectedIndex6!=-1){
            
             therapistid = modelOrder.getValueAt(selectedIndex6, 0).toString();
        }
         
        int selectedIndex1 = tblStudent.getSelectedRow();
        if(selectedIndex1==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Student!");
            return;
            
        }
        
        
        
        
        String studentid = null;
        if(selectedIndex1!=-1){
            
             studentid = modelStudent.getValueAt(selectedIndex1, 0).toString();
        }
        
        for(Therapy therapy: therapyqueue.getTherapylist()){
            
            if(therapy.getTherapistid().equals(therapistid) && therapy.getStudentid().equals(studentid)){
                
                DefaultTableModel model = (DefaultTableModel) tblPaymentStatus.getModel();
                model.setRowCount(0);
                
                populatePaymentTable(therapy,model);
            }
        }
        
        JOptionPane.showMessageDialog(this, "Paid!");
        
        
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnViewStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewStudentsActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel modelOrder = (DefaultTableModel)tblTherapists.getModel();
        int selectedIndex = tblTherapists.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel)tblStudent.getModel();
        model.setRowCount(0);
        if(selectedIndex==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Therapist!");
            return;
            
        }
        String therapistid = null;
        
        if(selectedIndex!=-1){
            
             therapistid = modelOrder.getValueAt(selectedIndex, 0).toString();
        }
        
        for(Student student: studentdirectory.getstudentlist()){
            
            if(student.getTherapistid().equals(therapistid)){
                
                populateStudentTable(student.getId(),model);
            }
        }
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_btnViewStudentsActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        Calendar cal = calendarSession.getCalendar();
        
        Date date = cal.getTime();
        String strDate = DateFormat.getDateInstance().format(date);
        txtDate.setText(strDate);
        
        String slot = cbcSlot.getSelectedItem().toString();
        int selectedIndex = tblTherapists.getSelectedRow();
        
        DefaultTableModel modelOrder = (DefaultTableModel)tblTherapists.getModel();
         DefaultTableModel modelStudent = (DefaultTableModel)tblStudent.getModel();
         if(selectedIndex==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Therapist!");
            return;
            
        }
         String therapistid=null;
         if(selectedIndex!=-1){
            
             therapistid = modelOrder.getValueAt(selectedIndex, 0).toString();
        }
         
        
        for(Therapy therapy: therapyqueue.getTherapylist()){
            
            if(therapy.getTherapistid().equals(therapistid)){
                
            
            
            if(therapy.getDate().equals(strDate) && therapy.getTime().equals(slot)){
                
                JOptionPane.showMessageDialog(this, "Please pick another slot!");
                return;
                
                
            }
        }
        }
        
        Therapy therapy = therapyqueue.addTherapy();
        Random rand = new Random();
        int up = 12345;
        int random = rand.nextInt(12345678);
        therapy.setId(random);
        
        therapy.setDate(strDate);
        therapy.setTime(slot);
        
        
        
        int selectedIndex1 = tblStudent.getSelectedRow();
        if(selectedIndex1==-1){
            
            JOptionPane.showMessageDialog(this, "Please Select a Student!");
            return;
            
        }
        
        
        
        
        String studentid = null;
        if(selectedIndex1!=-1){
            
             studentid = modelStudent.getValueAt(selectedIndex1, 0).toString();
        }
        
        therapy.setStudentid(studentid);
        therapy.setTherapistid(therapistid);
        
        //populateStudentTable(studentid);
        
        studentdirectory.RetrieveStudent(studentid).setAppointment(Boolean.TRUE);
        JOptionPane.showMessageDialog(this, "Appointment Scheduled!");
        
        
        
        
    }//GEN-LAST:event_btnAssignActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAction1;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnViewStudents;
    private com.toedter.calendar.JCalendar calendarSession;
    private javax.swing.JComboBox<String> cbcSlot;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblCompletedSession;
    private javax.swing.JLabel lblSelect;
    private javax.swing.JLabel lblStudents;
    private javax.swing.JLabel lblTherapists;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel managePaymentJPanel;
    private javax.swing.JTable tblPaymentStatus;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblTherapists;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
    
}
