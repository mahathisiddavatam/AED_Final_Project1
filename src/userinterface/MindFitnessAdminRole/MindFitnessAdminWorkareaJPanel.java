/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.MindFitnessAdminRole;

import Business.EcoSystem;
import Business.MindFitness.MindFitStaff;
import Business.MindFitness.Nutritionist;
import Business.MindFitness.YogaInstructor;
import Business.Role.MindFitnessStaffRole;
import Business.Role.NutritionistRole;
import Business.Role.YogaInstrRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.NutritionRequest;
import Business.WorkQueue.NutritionistAppointment;
import Business.WorkQueue.YogaAppointment;
import Business.WorkQueue.YogaRequest;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Varakumar
 */
public class MindFitnessAdminWorkareaJPanel extends javax.swing.JPanel {
    private JPanel UserProcessContainer;
    private UserAccount account;
    private EcoSystem system;

    /**
     * Creates new form MindFitnessAdminWorkareaJPanel
     */
    public MindFitnessAdminWorkareaJPanel(JPanel UserProcessContainer, UserAccount account, EcoSystem system) {
        initComponents();
        this.UserProcessContainer=UserProcessContainer;
        this.account=account;
        this.system=system;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMindfit = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        lblOrgType2 = new javax.swing.JLabel();
        cmbOrgType2 = new javax.swing.JComboBox<>();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnSubmit = new javax.swing.JButton();
        lblOrgName2 = new javax.swing.JLabel();
        lblEmail2 = new javax.swing.JLabel();
        lblPhoneNo2 = new javax.swing.JLabel();
        lblAddress2 = new javax.swing.JLabel();
        lblCity2 = new javax.swing.JLabel();
        lblCountry2 = new javax.swing.JLabel();
        lblZip2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhoneNo = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtCountry = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome, MindFit Admin!");

        tblMindfit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "UserName", "Employee Type", "Contact No", "Address", "Zipcode"
            }
        ));
        jScrollPane3.setViewportView(tblMindfit);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblOrgType2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblOrgType2.setText("Employee:");

        cmbOrgType2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yoga Instructor", "Nutritionist","MindFitness Staff" }));
        cmbOrgType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrgType2ActionPerformed(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblUsername.setText("UserName:");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblPassword.setText("Password:");

        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("*** 8-10 characters, including numbers and special characters");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lblOrgName2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblOrgName2.setText("Employee Name:");

        lblEmail2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblEmail2.setText("Email:");

        lblPhoneNo2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblPhoneNo2.setText("Phone no.:");

        lblAddress2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblAddress2.setText("Address:");

        lblCity2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblCity2.setText("City:");

        lblCountry2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblCountry2.setText("Country:");

        lblZip2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblZip2.setText("Zipcode:");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAddress2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPhoneNo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEmail2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrgName2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrgType2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCity2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCountry2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblZip2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbOrgType2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtUsername)
                            .addComponent(txtPassword)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(txtName)
                            .addComponent(txtEmail)
                            .addComponent(txtPhoneNo)
                            .addComponent(txtAddress)
                            .addComponent(txtCity)
                            .addComponent(txtCountry)
                            .addComponent(txtZip))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                        .addGap(56, 56, 56)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrgType2)
                    .addComponent(cmbOrgType2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmit)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrgName2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail2)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNo2)
                    .addComponent(txtPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress2)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity2)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountry2)
                    .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZip2)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCreate)
                .addGap(0, 19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelOrder = (DefaultTableModel)tblMindfit.getModel();
        int selectedIndex = tblMindfit.getSelectedRow();
        if(selectedIndex!=-1){
            
            String order = modelOrder.getValueAt(selectedIndex, 0).toString();
            String type = modelOrder.getValueAt(selectedIndex, 1).toString();
            
            system.getUserAccountDirectory().deleteUserAccount(order);
            
            if(type=="MindFitness Staff"){
                
                system.getMindfitnessdir().getMindstaffdir().DeleteMindFitStaff(order);
                modelOrder.removeRow(selectedIndex);
                
                
                JOptionPane.showMessageDialog(this, "Deleted!");
                return;

            }
            
            if(type=="Nutritionist"){
                
                system.getMindfitnessdir().getNutridir().DeleteNutritionist(order);
                modelOrder.removeRow(selectedIndex);
                
                Iterator<NutritionistAppointment> itr5 = system.getMindfitnessdir().getNutriqueue().getNutritionistAppointmentlist().iterator();
            
            while(itr5.hasNext()){
            
            NutritionistAppointment ua = itr5.next();
            if(ua.getNutritionistid().equals(order)){
                itr5.remove();
            }
        }
            
            Iterator<NutritionRequest> itr6 = system.getMindfitnessdir().getNutrirequestqueue().getNutritionRequestlist().iterator();
            
            while(itr6.hasNext()){
            
            NutritionRequest ua = itr6.next();
            if(ua.getYogaid().equals(order)){
                itr6.remove();
            }
        }
            
            
                JOptionPane.showMessageDialog(this, "Deleted!");
                return;
                
            }    
            
            if(type=="Yoga Instructor"){
                
                system.getMindfitnessdir().getYogadir().DeleteYogaInstructor(order);
                modelOrder.removeRow(selectedIndex);
                
                Iterator<YogaAppointment> itr6 = system.getMindfitnessdir().getYogaqueue().getYogaAppointmentlist().iterator();
            
            while(itr6.hasNext()){
            
            YogaAppointment ua = itr6.next();
            if(ua.getYogaid().equals(order)){
                itr6.remove();
            }
        }
            
            Iterator<YogaRequest> itr7 = system.getMindfitnessdir().getYogarequestqueue().getYogaRequestlist().iterator();
            
            while(itr7.hasNext()){
            
            YogaRequest ua = itr7.next();
            if(ua.getYogaid().equals(order)){
                itr7.remove();
            }
        }
                
                
                JOptionPane.showMessageDialog(this, "Deleted!");
                return;
                
            }   
                
                
            }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbOrgType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrgType2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrgType2ActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        
        if((txtUsername.getText().isEmpty())|| (txtPassword.getText().isEmpty())
                ){
            JOptionPane.showMessageDialog(this, "Field left Blank!");
        }
        String username = txtUsername.getText();
        String password = txtPassword.getText();
        
        String reg = "^(?=.*[0-9])"
        + "(?=.*[a-z])(?=.*[A-Z])"
        + "(?=.*[@#$%^&+=])"
        + "(?=\\S+$).{8,20}$";
        Pattern pat = Pattern.compile(reg);
        Matcher mat = pat.matcher(password);
        int f = 0;
        if(mat.matches()){
            f=1;

        }
        if(f==0){

            JOptionPane.showMessageDialog(this, "Invalid Password!");
            return;

        }
        
        if(system.getUserAccountDirectory().checkIfUsernameIsUnique(username)==false){

            JOptionPane.showMessageDialog(this, "Username already taken!");
            return;

        }
        
        if(cmbOrgType2.getSelectedItem().toString()=="MindFitness Staff"){
            
            system.getUserAccountDirectory().createUserAccount(username, password, new MindFitnessStaffRole());
            system.getMindfitnessdir().getMindstaffdir().AddMindFitStaff(username);
            JOptionPane.showMessageDialog(this, "User Added!");
            return;
          
            
            
        }
        
        if(cmbOrgType2.getSelectedItem().toString()=="Nutritionist"){
            
            system.getUserAccountDirectory().createUserAccount(username, password, new NutritionistRole());
            system.getMindfitnessdir().getNutridir().AddNutritionist(username);
            JOptionPane.showMessageDialog(this, "User added!");
            return;
                       
            
        }
        
        if(cmbOrgType2.getSelectedItem().toString()=="Yoga Instructor"){
            
            system.getUserAccountDirectory().createUserAccount(username, password, new YogaInstrRole());
            system.getMindfitnessdir().getYogadir().AddYogaInstructor(username);
            JOptionPane.showMessageDialog(this, "User added!");
            return;
                       
            
        }
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        // Mindfitness staff
        if(system.getMindfitnessdir().getMindstaffdir().RetrieveMindFitStaff(txtUsername.getText())!=null){
            MindFitStaff mindfitstaff = system.getMindfitnessdir().getMindstaffdir().RetrieveMindFitStaff(txtUsername.getText());
            String name = txtName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zipcode = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zipcode==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
       
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            mindfitstaff.setName(name);
            mindfitstaff.setAddress(address);
            mindfitstaff.setCountry(country);
            mindfitstaff.setCity(city);
            mindfitstaff.setEmail(email);
            mindfitstaff.setPhone(phno);
            mindfitstaff.setZipcode(zipcode);
            JOptionPane.showMessageDialog(this, "Mindfitness Staff added!");
            populateTable();
            return;
 
            
        }
        
        // Nutritionist
        if(system.getMindfitnessdir().getNutridir().RetrieveNutritionist(txtUsername.getText())!=null){
            Nutritionist nutritionist = system.getMindfitnessdir().getNutridir().RetrieveNutritionist(txtUsername.getText());
            String name = txtName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zipcode = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zipcode==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
       
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            nutritionist.setName(name);
            nutritionist.setAddress(address);
            nutritionist.setCountry(country);
            nutritionist.setCity(city);
            nutritionist.setEmail(email);
            nutritionist.setPhone(phno);
            nutritionist.setZipcode(zipcode);
            JOptionPane.showMessageDialog(this, "Nutritionist added!");
            populateTable();
            return;
 
            
        }
        
        // Yoga Instructor
        if(system.getMindfitnessdir().getYogadir().RetrieveYogaInstructor(txtUsername.getText())!=null){
            YogaInstructor yogainst = system.getMindfitnessdir().getYogadir().RetrieveYogaInstructor(txtUsername.getText());
            String name = txtName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zipcode = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zipcode==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
       
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            yogainst.setName(name);
            yogainst.setAddress(address);
            yogainst.setCountry(country);
            yogainst.setCity(city);
            yogainst.setEmail(email);
            yogainst.setPhone(phno);
            yogainst.setZipcode(zipcode);
            JOptionPane.showMessageDialog(this, "Yoga Instructor added!");
            populateTable();
            return;
 
            
        }
        
        if(system.getMindfitnessdir().getMindstaffdir().RetrieveMindFitStaff(txtUsername.getText())==null || system.getMindfitnessdir().getNutridir().RetrieveNutritionist(txtUsername.getText()) ==null || system.getMindfitnessdir().getYogadir().RetrieveYogaInstructor(txtUsername.getText()) == null){
            
            JOptionPane.showMessageDialog(this, "Create User Account First!");
            return;
            
            
            
        }
        
        
        
        
        
    }//GEN-LAST:event_btnCreateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbOrgType2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblCountry2;
    private javax.swing.JLabel lblEmail2;
    private javax.swing.JLabel lblOrgName2;
    private javax.swing.JLabel lblOrgType2;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhoneNo2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblZip2;
    private javax.swing.JTable tblMindfit;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhoneNo;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblMindfit.getModel();
        model.setRowCount(0);
        
       for(MindFitStaff mindfitstaff: system.getMindfitnessdir().getMindstaffdir().getmindfitstafflist()){
            
            Object[] row = new Object[5];
            row[0]= mindfitstaff.getId();
            row[1]= "Mindfitness Staff";
            row[2]= mindfitstaff.getPhone();
            row[3]= mindfitstaff.getAddress();
            row[4]=mindfitstaff.getZipcode();
            
            model.insertRow(0, row);
                   
        }
       
       if(system.getMindfitnessdir().getNutridir().getnutritionistlist()==null){
           
           ArrayList<Nutritionist> nutritionistlist = new ArrayList();
           
           
           
           system.getMindfitnessdir().getNutridir().setNutritionistlist(nutritionistlist);
           
           
       }
       
       for(Nutritionist nutritionist: system.getMindfitnessdir().getNutridir().getnutritionistlist()){
            
            Object[] row = new Object[5];
            row[0]= nutritionist.getId();
            row[1]= "Nutritionist";
            row[2]= nutritionist.getPhone();
            row[3]= nutritionist.getAddress();
            row[4]=nutritionist.getZipcode();
            
            model.insertRow(0, row);
                  
        }
       
       if(system.getMindfitnessdir().getYogadir().getyogainstlist()==null){
           
           ArrayList<YogaInstructor> yogalist = new ArrayList();
           
           
           
           system.getMindfitnessdir().getYogadir().setYogainstlist(yogalist);
           
           
       }
       
        for(YogaInstructor yogaInst: system.getMindfitnessdir().getYogadir().getyogainstlist()){
            
            Object[] row = new Object[5];
            row[0]= yogaInst.getId();
            row[1]= "Yoga Instructor";
            row[2]= yogaInst.getPhone();
            row[3]= yogaInst.getAddress();
            row[4]=yogaInst.getZipcode();
            
            model.insertRow(0, row);
                  
        }
    }
}
