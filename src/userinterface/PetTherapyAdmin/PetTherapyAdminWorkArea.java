/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PetTherapyAdmin;

import Business.EcoSystem;
import Business.PetTherapy.PetParent;
import Business.PetTherapy.PetTherapyStaff;
import Business.Role.PetParentRole;
import Business.Role.PetTherapyStaffRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PTherapy;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Varakumar
 */
public class PetTherapyAdminWorkArea extends javax.swing.JPanel {
    
    private JPanel UserProcessContainer;
    private UserAccount account;
    private EcoSystem system;

    /**
     * Creates new form PetTherapyAdminWorkArea
     */
    public PetTherapyAdminWorkArea(JPanel UserProcessContainer, UserAccount account, EcoSystem system) {
        initComponents();
        this.UserProcessContainer=UserProcessContainer;
        this.account=account;
        this.system=system;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPetTherapy = new javax.swing.JTable();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblOrgType2 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblOrgName2 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        lblEmail2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblPhoneNo2 = new javax.swing.JLabel();
        lblAddress2 = new javax.swing.JLabel();
        lblCity2 = new javax.swing.JLabel();
        lblCountry2 = new javax.swing.JLabel();
        lblZip2 = new javax.swing.JLabel();
        cmbOrgType2 = new javax.swing.JComboBox<>();
        txtEmployeeName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhoneNo = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtCountry = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblPetName = new javax.swing.JLabel();
        txtPetName = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome, Pawsitive Admin!");

        lblUsername.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblUsername.setText("UserName:");

        tblPetTherapy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "UserName", "Employee Type", "Contact No", "Address", "Zipcode"
            }
        ));
        jScrollPane3.setViewportView(tblPetTherapy);

        lblPassword.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblPassword.setText("Password:");

        lblOrgType2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblOrgType2.setText("Employee:");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        lblOrgName2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblOrgName2.setText("Employee Name:");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lblEmail2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblEmail2.setText("Email:");

        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("*** 8-10 characters, including numbers and special characters");

        lblPhoneNo2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblPhoneNo2.setText("Phone no.:");

        lblAddress2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblAddress2.setText("Address:");

        lblCity2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblCity2.setText("City:");

        lblCountry2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblCountry2.setText("Country:");

        lblZip2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblZip2.setText("Zipcode:");

        cmbOrgType2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pet Parent" }));
        cmbOrgType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrgType2ActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblPetName.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblPetName.setText("Pet Name:");

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblPetName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPetName, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblOrgName2)
                            .addGap(18, 18, 18)
                            .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblEmail2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblPhoneNo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblAddress2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblCity2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblCountry2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblZip2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrgType2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                        .addComponent(lblPassword))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addComponent(cmbOrgType2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtUsername)
                        .addComponent(txtPassword))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addGap(42, 42, 42)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnRefresh)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrgName2)
                    .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPetName)
                    .addComponent(txtPetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail2)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNo2)
                    .addComponent(txtPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress2)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity2)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountry2)
                    .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZip2)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCreate)
                .addGap(98, 98, 98))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(179, 179, 179)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblOrgType2)
                        .addComponent(cmbOrgType2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblUsername)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPassword)
                        .addComponent(jLabel4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnSubmit)
                    .addContainerGap(382, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if((txtUsername.getText().isEmpty()) || (txtPassword.getText().isEmpty())){

            JOptionPane.showMessageDialog(this, "Field left Blank!");
        }
        String username = txtUsername.getText();
        String password = txtPassword.getText();
        
        String reg = "^(?=.*[0-9])"
        + "(?=.*[a-z])(?=.*[A-Z])"
        + "(?=.*[@#$%^&+=])"
        + "(?=\\S+$).{8,20}$";
        Pattern pat = Pattern.compile(reg);
        Matcher mat = pat.matcher(password);
        int f = 0;
        if(mat.matches()){
            f=1;

        }
        if(f==0){

            JOptionPane.showMessageDialog(this, "Invalid Password!");
            return;

        }
        
        if(system.getUserAccountDirectory().checkIfUsernameIsUnique(username)==false){

            JOptionPane.showMessageDialog(this, "Username already taken!");
            return;

        }
        
        if(cmbOrgType2.getSelectedItem().toString()=="Pet Therapy Staff"){
            system.getUserAccountDirectory().createUserAccount(username, password, new PetTherapyStaffRole());
            system.getPettherapydirectory().getPetstaffdir().AddPetTherapyStaff(username);
            JOptionPane.showMessageDialog(this, "User Added!");
            return;
 
        }
        
        if(cmbOrgType2.getSelectedItem().toString()=="Pet Parent"){
            
            system.getUserAccountDirectory().createUserAccount(username, password, new PetParentRole());
            system.getPettherapydirectory().getPetparentdir().AddPetParent(username);
            JOptionPane.showMessageDialog(this, "User added!");
            return;
            
            
            
        }
        
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void cmbOrgType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrgType2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrgType2ActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        if(system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText())!=null){
            PetTherapyStaff petTherapyStaff = system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText());
            String name = txtEmployeeName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zipcode = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zipcode==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
            
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            petTherapyStaff.setEmployeename(name);
            petTherapyStaff.setAddress(address);
            petTherapyStaff.setCountry(country);
            petTherapyStaff.setCity(city);
            petTherapyStaff.setEmail(email);
            petTherapyStaff.setPhone(phno);
            petTherapyStaff.setZipcode(zipcode);
            JOptionPane.showMessageDialog(this, "Pat Therapy Staff added!");
            populateTable();
            return;
            
        }
        
        if(system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText())!=null){
            PetParent petparent = system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText());
            String name = txtEmployeeName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zip = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zip==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
            
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            petparent.setEmployeename(name);
            petparent.setAddress(address);
            petparent.setCountry(country);
            petparent.setCity(city);
            petparent.setEmail(email);
            petparent.setPhone(phno);
            petparent.setZipcode(zip);
            JOptionPane.showMessageDialog(this, "Pet Parent Added!");
            
            populateTable();
            return;
            
        }
        
        if(system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText())==null || system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText())==null){
            
            JOptionPane.showMessageDialog(this, "Create User Account First!");
            return;
  
        }
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        DefaultTableModel modelOrder = (DefaultTableModel)tblPetTherapy.getModel();
        int selectedIndex = tblPetTherapy.getSelectedRow();
        
        if(selectedIndex!=-1){
            
            String order = modelOrder.getValueAt(selectedIndex, 0).toString();
            
            String type = modelOrder.getValueAt(selectedIndex, 1).toString();
            if(type=="Pet Therapy Staff"){
                
                system.getPettherapydirectory().getPetstaffdir().DeletePetTherapyStaff(order);
               
                modelOrder.removeRow(selectedIndex);
                JOptionPane.showMessageDialog(this, "Deleted!");
                return;
                
                
                
            }
            
            if(type=="Pet Parent"){
                
                system.getPettherapydirectory().getPetparentdir().DeletePetParent(order);
                
                Iterator<PTherapy> itr5 = system.getPettherapydirectory().getPettherapyqueue().getPTherapylist().iterator();
            
            while(itr5.hasNext()){
            
            PTherapy ua = itr5.next();
            if(ua.getParentid().equals(order)){
                itr5.remove();
            }
        }
               
                modelOrder.removeRow(selectedIndex);
                JOptionPane.showMessageDialog(this, "Deleted!");
                return;
                   
            }
              
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel modelOrder = (DefaultTableModel)tblPetTherapy.getModel();
        int selectedIndex = tblPetTherapy.getSelectedRow();
        
        if(selectedIndex!=-1){
            
            String order = modelOrder.getValueAt(selectedIndex, 0).toString();
            
            String type = modelOrder.getValueAt(selectedIndex, 1).toString();
            txtUsername.setText(order);
        }
        
        if(system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText())!=null){
            PetTherapyStaff petTherapyStaff = system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText());
            String name = txtEmployeeName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zipcode = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zipcode==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
            
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            petTherapyStaff.setEmployeename(name);
            petTherapyStaff.setAddress(address);
            petTherapyStaff.setCountry(country);
            petTherapyStaff.setCity(city);
            petTherapyStaff.setEmail(email);
            petTherapyStaff.setPhone(phno);
            petTherapyStaff.setZipcode(zipcode);
            JOptionPane.showMessageDialog(this, "Pat Therapy Staff Updated!");
            populateTable();
            return;
            
        }
        
        if(system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText())!=null){
            PetParent petparent = system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText());
            String name = txtEmployeeName.getText();
            String email = txtEmail.getText();
            String phno = txtPhoneNo.getText();
            String address = txtAddress.getText();
            String city = txtCity.getText();
            String country = txtCountry.getText();
            String zip = txtZip.getText();
            
            if(name==null || email==null || phno==null || address==null || city==null || country==null || zip==null){
                
                JOptionPane.showMessageDialog(this, "Fields blank!");
                return;

            }
            
            String reg= "^\\d{10}$";
            Pattern pat = Pattern.compile(reg);
            Matcher mat = pat.matcher(phno);

            if(!(mat.matches())){

                JOptionPane.showMessageDialog(this, "Invalid Phone!");
                return;

            }
            
            String regemail = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        
            Pattern em = Pattern.compile(regemail);
            Matcher ma = em.matcher(email);
            int f=0;
            if((ma.matches())){
            
            f=1;
            
            
            
            
            
         }
            if(f==0){
            
            JOptionPane.showMessageDialog(this, "Invalid Email!");
            return;
            
            
            }
            petparent.setEmployeename(name);
            petparent.setAddress(address);
            petparent.setCountry(country);
            petparent.setCity(city);
            petparent.setEmail(email);
            petparent.setPhone(phno);
            petparent.setZipcode(zip);
            JOptionPane.showMessageDialog(this, "Pet Parent Updated!");
            
            populateTable();
            return;
            
        }
        
        if(system.getPettherapydirectory().getPetstaffdir().RetrievePetTherapyStaff(txtUsername.getText())==null || system.getPettherapydirectory().getPetparentdir().RetrievePetParent(txtUsername.getText())==null){
            
            JOptionPane.showMessageDialog(this, "Create User Account First!");
            return;
  
        }
        
        
        
        
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbOrgType2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblCountry2;
    private javax.swing.JLabel lblEmail2;
    private javax.swing.JLabel lblOrgName2;
    private javax.swing.JLabel lblOrgType2;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPetName;
    private javax.swing.JLabel lblPhoneNo2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblZip2;
    private javax.swing.JTable tblPetTherapy;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPetName;
    private javax.swing.JTextField txtPhoneNo;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPetTherapy.getModel();
        model.setRowCount(0);

       for(PetTherapyStaff petTherapyStaff: system.getPettherapydirectory().getPetstaffdir().getpettherapystafflist()){
            
            Object[] row = new Object[5];
            row[0]= petTherapyStaff.getId();
            row[1]= "Pet Therapy Staff";
            row[2]= petTherapyStaff.getPhone();
            row[3]= petTherapyStaff.getAddress();
            row[4]=petTherapyStaff.getZipcode();
            
            model.insertRow(0, row);
                
            
            
            
        }
       if(system.getPettherapydirectory().getPetparentdir().getpetparentlist()==null){
           
           ArrayList <PetParent> petparentlist = new ArrayList();
           system.getPettherapydirectory().getPetparentdir().setPetparentlist(petparentlist);
       }
       
       for(PetParent petParent: system.getPettherapydirectory().getPetparentdir().getpetparentlist()){
            
            Object[] row = new Object[5];
            row[0]= petParent.getId();
            row[1]= "Pet Parent";
            row[2]= petParent.getPhone();
            row[3]= petParent.getAddress();
            row[4]= petParent.getZipcode();
            
            model.insertRow(0, row);

        }

    }
}
